// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Doctor_Module.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250621092145_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Appointment", b =>
                {
                    b.Property<string>("AppointmentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Emergency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patient_ID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prescription_ID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor_Module.Models.Doctor.Doctor", b =>
                {
                    b.Property<string>("DoctorID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Experiance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Doctor_Module.Timeslots.Timeslot", b =>
                {
                    b.Property<int>("TimeSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("End_Time")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Start_Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("count")
                        .HasColumnType("INTEGER");

                    b.HasKey("TimeSlotID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Timeslots");
                });

            modelBuilder.Entity("Appointment", b =>
                {
                    b.HasOne("Doctor_Module.Models.Doctor.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Doctor_Module.Timeslots.Timeslot", b =>
                {
                    b.HasOne("Doctor_Module.Models.Doctor.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
